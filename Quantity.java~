import java.util.*;
import java.text.DecimalFormat;

/* quantity.java start
 * it's going to be a long tuesday,,
 * 
 * */


public class Quantity
{
  private double value;
  private HashMap< String, Integer > unit;
  
  public Quantity()
  {
    value = 1.0;
    // reference : http://stackoverflow.com/questions/5468664/how-do-i-set-an-empty-list-of-a-certain-type
    unit = new HashMap< String,Integer >();
    numerator = Collections.<String> emptyList();
    denominator = Collections.<String> emptyList();
    value = 1;
    // is this needed? i'm not sure
  }
  
  public Quantity(Quantity target)
  {
    value = target.value;
    HashMap<String, Integer> toCopy = new HashMap<String, Integer>();
    toCopy = (HashMap<String, Integer>)(target.unit.clone());
    
    unit = toCopy;
  }
  
  public Quantity(double inputValue, List<String> numerator,
                  List<String> denominator) throws IllegalArgumentException
  {
    if(numerator == null || denominator == null)
      throw new IllegalArgumentException();
    
    value = inputValue;
    
    for(int i = 0 ; i < numerator.size() ; i++)
      unit.put(numerator.get(i), i);
    
    for(int i = 0 ; i < denominator.size() ; i++)
      unit.put(denominator.get(i), -1*i);
  }
  
  public Quantity mul (Quantity target)
  {
    Quantity result = new Quantity();
    
    
    return null;
  }
  
  public Quantity div (Quantity target)
  {
    return null;
  }
  
  public Quantity pow (int power)
  {
    return null;
  }
  
  public Quantity add (Quantity target) throws IllegalArgumentException
  {
    return null;
  }
  
  public Quantity sub (Quantity target) throws IllegalArgumentException
  {
    return null;
  }
  
  public Quantity negate()
  {
    return null;
  }
  
  public static Quantity normalizedUnit (String unitName, Map<String, Quantity> db)
  {
    return null;
  }
  
  public Quantity normalize (Map<String, Quantity> db)
  {
    return null;
  }
  
  public boolean equals(Object toCompare)
  {
    return false;
  }
  
  public int testHashCode()
  {
    return 0;
  }
  
  public String toString()
  {
// XXX You will need to fix these lines to match your fields!
    double valueOfTheQuantity = this.value;
      Map<String,Integer> mapOfTheQuantity = this.unit;
// Ensure we get the units in order
      TreeSet<String> orderedUnits =
      new TreeSet<String>(mapOfTheQuantity.keySet());
      StringBuffer unitsString = new StringBuffer();
        
    for (String key : orderedUnits) {
      int expt = mapOfTheQuantity.get(key);
        unitsString.append(" " + key);
        if (expt != 1)
        unitsString.append("^" + expt);
    }
      
// Used to convert doubles to a string with a
// fixed maximum number of decimal places.
    DecimalFormat df = new DecimalFormat("0.0####");
// Put it all together and return.
      return df.format(valueOfTheQuantity)
      + unitsString.toString();
  }

}
